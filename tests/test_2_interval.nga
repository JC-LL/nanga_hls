def polynom(x : interval) : interval
  cst a3 : int32 = 1
  cst a2 : int32 = 2
  cst a1 : int32 = 3
  cst a0 : int32 = 4

  return a3*x**3 + a2*x**2 + a1*x + a0
end

;; polynom is now transformed no introduce dataflow nodes (n) :
;; RULE : only inputs or nodes can be on the right hand side.
dfg polynom(x : interval)
  n0 <= x
  n1 <= n0*n0
  n2 <= n1*n0
  n3 <= a3*n2

  n4 <= n0*n0
  n5 <= a2*n1

  n6 <= a1*n0

  n7 <= n3 + n5
  n8 <= n5 + n6
  n7 <= n8 + a0

  return n7
end

;; polynom is now transformed no introduce control scheduling :
dfg polynom(x : interval)
  cstep 0 :
    n0 <= x
    n1 <= n0*n0
    n2 <= n1*n0

  cstep 1 :
    n3 <= a3*n2

  cstep 2 :
    n4 <= x*x
    n5 <= a2*n4

  cstep 3 :
    n6 <= a1*n0

    n7 <= n3 + n5
    n8 <= n5 + n6
    n7 <= n8 + a0

  cstep 4 :
    return n7
end

;; polynom is now transformed no introduce allocation/binding :
;; Registers (eg 'rx') are indicated on the right of the nodes/inputs like this : n<rx>
;; They normally appear on the  LEFT of node assignements like this : n2<r0> <= n1*x
;; But they optionnally can be recalled on the right : n7 <= n3<r1> + n5<r1>.
;; the coherency of such recalls are checked by the compiler.
;; same for functional units :
;;   *<u1> annotates multiplication to indicate that it operates on a functional unit named 'u1'
dfg polynom(x : interval)
  cstep 0 :
    n0     <= x<i0>
    n1     <= n0 *<u1> n0
    n2<r0> <= n1 *<u2> x

  cstep 1 :
    n3<r1> <= a3 *<u1> n2

  cstep 2 :
    n4 <= x *<u2> x
    n5<r1> <= a2 *<u1> n4

  cstep 3 :
    n6 <= a1*<u1>x

    n7 <= n3 +<u3> n5<r1>
    n8 <= n5<r1> +<u4> n6
    n7<r2> <= n8 +<u5> a0

  cstep 4 :
    return n7
end
