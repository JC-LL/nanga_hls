def polynom(x : i32) : i32
  const a3 : i32 = 1
  const a2 : i32 = 2
  const a1 : i32 = 3
  const a0 : i32 = 4
  const xx : -5..5
  y = x
  return a3*x**3 + a2*x**2 + a1*x + a0
  # Note that several return expression should be allowed, separated by commas ','
end

;; polynom is now transformed into dataflow nodes (n) :
;; RULE : only inputs or nodes can be on the right hand side.
;; circuit outputs are indicated
def polynom(x : i32) : i32
  const a3 : i32 = 1
  const a2 : i32 = 2
  const a1 : i32 = 3
  const a0 : i32 = 4

  var n0,n1,n2,n3,n4,n5,n6,n7 : infer
  n0 = x
  n1 = n0*n0
  n2 = n1*n0
  n3 = a3*n2

  n4 = n0*n0
  n5 = a2*n1

  n6 = a1*n0

  n7 = n3 + n5
  n8 = n5 + n6
  n7 = n8 + a0

  return n7
end

;; nodes signals are annotated with value ranges into braces
;;

def polynom(x : i32) : n7
  const a3 : i32 = 1
  const a2 : i32 = 2
  const a1 : i32 = 3
  const a0 : i32 = 4
  var n0,n1,n2,n3,n4,n5,n6,n7 : infer
  n0{}  = x
  n1{}  = n0{} * n0{}
  n2{}  = n1{} * n0{}
  n3{}  = a3{} * n2{}

  n4{}  = n0{} * n0{}
  n5{}  = a2{} * n4{}

  n6{}  = a1{} * n0{}

  n7 = n3 + n5
  n8 = n7 + n6
  n7 = n8 + a0

  return n7
end

;; we introduce dfg scheduling :
def polynom(x : i32) : i32
  const a3 : i32 = 1
  const a2 : i32 = 2
  const a1 : i32 = 3
  const a0 : i32 = 4
  var n0,n1,n2,n3,n4,n5,n6,n7 : infer
  cstep 0 {
    n0{i32} = x
    n1{i64} = n0{i32} * n0{i32}
    n2{i96} = n1{i64} * n0{i32}
  }
  cstep 1 {
    n3{i128} = a3{i32} * n2{i96}
  }

  cstep 2 {
    n4{i64}  = n0{i32} * n0{i32}
    n5{i96}  = a2{i32} * n4{i64}
  }

  cstep 3 {
    n6{i64}  = a1{i32} * n0{i32}
  }
  cstep 4 {
    n7{i} = n3{i128} + n5{i96}
    n8 = n7{} + n6{i64}
    n7 = n8 + a0
  }
  cstep 5 {
    return n7{i32}
  }
end

;; polynom is subject to allocation/binding :
;; Registers (eg 'rx') are indicated on the right of the nodes/inputs like this : n@rx
;; They normally appear on the  LEFT of node assignements like this : n2@r0 = n1*x
;; But they optionnally can be recalled on the right : n7 = n3@r1 + n5@r2.
;; the coherency of such recalls are checked by the compiler.
;; same for functional units :
;;   *@u1 annotates multiplication to indicate that it operates on a functional unit named 'u1'
;; the compiler will check that each FU is not used more than once per control step.

def polynom(x : i32) : i32
  const a3 : i32 = 1
  const a2 : i32 = 2
  const a1 : i32 = 3
  const a0 : i32 = 4
  var n0,n1,n2,n3,n4,n5,n6,n7 : infer
  cstep 0 {
    n0{i32}@R1 = x{}@I1
    n1{i64} = n0{i32} *@MUL1 n0{i32}
    n2{i96} = n1{i64} *@MUL2 n0{i32}
  }
  cstep 1 {
    n3{i128} = a3{i32} *@MUL1 n2{i96}
  }
  cstep 2 {
    n4{i64}  = n0{i32} *@MUL1 n0{i32}
    n5{i96}  = a2{i32} *@MUL2 n4{i64}
  }
  cstep 3 {
    n6{i64}  = a1{i32} *@MUL1 n0{i32}
  }
  cstep 4 {
    n7{i} = n3{i128} +@ADD1 n5{i96}
    n8 = n7{} +@ADD2 n6{i64}
    n7 = n8 +@ADD3 a0
  }
  cstep 5 {
    return n7 {i32}
  }
end
